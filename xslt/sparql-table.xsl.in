<?xml version="1.0" encoding="utf-8"?>
<!--
  XSLT script to format SPARQL SELECT results (in application/sparql-results+xml
  format) in a table.

  Copyright 2014 European Union

  Licensed under the EUPL, Version 1.1 or - as soon they
  will be approved by the European Commission - subsequent
  versions of the EUPL (the "Licence");
  You may not use this work except in compliance with the
  Licence.
  You may obtain a copy of the Licence at:
  http://ec.europa.eu/idabc/eupl

  Unless required by applicable law or agreed to in
  writing, software distributed under the Licence is
  distributed on an "AS IS" basis,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
  express or implied.
  See the Licence for the specific language governing
  permissions and limitations under the Licence.
-->
<xsl:stylesheet version="1.0"
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:res="http://www.w3.org/2005/sparql-results#"
  exclude-result-prefixes="xsl res">

  <xsl:include href="%ROOTURI%xslt/include.xsl" />

  <xsl:output method="html" indent="yes" encoding="UTF-8" />

  <xsl:template match="res:sparql">
    <xsl:call-template name="html">
      <xsl:with-param name="title">
        Query results – Greek Open Data pilot
      </xsl:with-param>
      <xsl:with-param name="body">
        <h1>Query results</h1>
        <p><a href="/">« Return to the homepage</a></p>
        <div id="results">
          <xsl:call-template name="results" />
        </div>
      </xsl:with-param>
    </xsl:call-template>
  </xsl:template>

  <xsl:template name="results">
    <table>
      <thead>
        <tr>
          <xsl:for-each select="//res:head/res:variable">
            <th><xsl:value-of select="@name" /></th>
          </xsl:for-each>
        </tr>
      </thead>
      <tbody>
        <xsl:for-each select="//res:result">
          <tr>
            <xsl:apply-templates select="."/>
          </tr>
        </xsl:for-each>
      </tbody>
    </table>
  </xsl:template>

  <xsl:template match="res:result">
    <xsl:variable name="current" select="." />
    <xsl:for-each select="//res:head/res:variable">
      <xsl:variable name="name" select="@name" />
      <td>
        <xsl:if test="$current/res:binding[@name=$name]">
          <xsl:apply-templates select="$current/res:binding[@name=$name]" />
        </xsl:if>
      </td>
    </xsl:for-each>
  </xsl:template>

  <xsl:template match="res:bnode">
    <xsl:text>(</xsl:text>
    <xsl:value-of select="text()" />
    <xsl:text>)</xsl:text>
  </xsl:template>

  <xsl:template match="res:uri">
    <a>
      <xsl:attribute name="href">
        <xsl:call-template name="resolve-uri">
          <xsl:with-param name="uri" select="text()" />
        </xsl:call-template>
      </xsl:attribute>
      <xsl:call-template name="strip-uri">
        <xsl:with-param name="uri" select="text()" />
      </xsl:call-template>
    </a>
  </xsl:template>

  <xsl:template match="res:literal">
    <xsl:value-of select="text()" />
  </xsl:template>

</xsl:stylesheet>
<!-- vim:set ts=2 sw=2 et: -->
