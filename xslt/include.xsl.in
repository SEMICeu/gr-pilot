<?xml version="1.0" encoding="utf-8"?>
<!--
  Common XSLT templates

  Copyright 2014 European Union

  Licensed under the EUPL, Version 1.1 or - as soon they
  will be approved by the European Commission - subsequent
  versions of the EUPL (the "Licence");
  You may not use this work except in compliance with the
  Licence.
  You may obtain a copy of the Licence at:
  http://ec.europa.eu/idabc/eupl

  Unless required by applicable law or agreed to in
  writing, software distributed under the Licence is
  distributed on an "AS IS" basis,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
  express or implied.
  See the Licence for the specific language governing
  permissions and limitations under the Licence.

-->
<xsl:stylesheet version="1.0"
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:ns="http://semic.eu/namespaces"
  xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
  xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"
  xmlns:locn="http://www.w3.org/ns/locn#"
  exclude-result-prefixes="xsl ns rdf rdfs locn">

  <xsl:param name="baseuri" select="'%BASEURI%'" />
  <xsl:param name="subject-uri" />
  <xsl:variable name="namespaces" select="document('%ROOTURI%xslt/namespaces.xml')" />

  <xsl:variable name="subject" select="//rdf:Description[@rdf:about=$subject-uri]" />
  <xsl:variable name="subject-label">
    <xsl:choose>
      <xsl:when test="$subject/rdfs:label">
        <xsl:value-of select="string($subject/rdfs:label)" />
      </xsl:when>
      <xsl:otherwise>
        <xsl:call-template name="strip-uri">
          <xsl:with-param name="uri" select="$subject-uri" />
        </xsl:call-template>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:variable>

  <xsl:output method="html" indent="yes" encoding="UTF-8" />

  <!-- Standard HTML boilerplate -->
  <xsl:template name="html">
    <xsl:param name="title" />
    <xsl:param name="body" />
    <xsl:param name="leaflet" select="false()" />
    <xsl:text disable-output-escaping='yes'>&lt;!DOCTYPE html></xsl:text>
    <html>
      <head>
        <meta charset="UTF-8" />
        <title><xsl:value-of select="$title" /></title>
        <meta name="viewport" content="width=device-width,initial-scale=1" />
        <link rel="stylesheet" type="text/css" href="/css/normalize.css" />
        <link rel="stylesheet" type="text/css" href="/css/gridism.css" />
        <link rel="stylesheet" type="text/css" href="http://fonts.googleapis.com/css?family=Open+Sans:400,300,600&amp;subset=latin,greek" />
        <link rel="stylesheet" type="text/css" href="/css/screen.css" />
        <script type="text/javascript" src="http://code.jquery.com/jquery-1.11.0.min.js"></script>
        <xsl:if test="$leaflet">
          <link rel="stylesheet" href="http://cdn.leafletjs.com/leaflet-0.7.2/leaflet.css" />
          <script src="http://cdn.leafletjs.com/leaflet-0.7.2/leaflet.js"></script>
        </xsl:if>
      </head>
      <body>
      <div class="wrapper">
        <header>
          <a href="/">
            <img src="/images/logo.png" alt="Υπουργείο Διοικητικής Μεταρρύθμισης και Ηλεκτρονικής Διακυβέρνησης" height="70" width="370" />
          </a>
        </header>
        <article>
          <xsl:copy-of select="$body" />
        </article>
        <footer>
          <p>Work in progress.</p>

          <p>This work is supported by
          <a href="http://ec.europa.eu/isa/actions/01-trusted-information-exchange/1-1action_en.htm" target="_blank">Action 1.1</a>
          of the
          <a href="http://ec.europa.eu/isa/" target="_blank">Interoperability Solutions
          for European Public Adminstrations (ISA)</a> Programme of the European
          Commission.</p>

          <p><strong>Linked Data pilots: </strong>
            <a href="http://location.testproject.eu/BEL">Core Location pilot</a> |
            <a href="http://cpsv.testproject.eu/CPSV">Core Public Service pilot</a> |
            <a href="http://org.testproject.eu/MAREG">Organisation Ontology pilot</a> |
            <a href="http://health.testproject.eu/PPP">Plant Protection Products pilot</a> |
            <a href="http://maritime.testproject.eu/CISE">Maritime Surveillance pilot</a>
          </p>

          <p>
            <a href="https://joinup.ec.europa.eu/asset/dcat_application_profile/description" target="_blank"><img alt="DCAT application profile for European data portals" src="https://joinup.ec.europa.eu/sites/default/files/imagecache/community_logo/DCAT_application_profile_for_European_data_portals_logo_0.png" width="70" height="70" /></a>
            <a href="https://joinup.ec.europa.eu/asset/adms/description" target="_blank"><img alt="Asset Description Metadata Schema (ADMS)" src="http://joinup.ec.europa.eu/sites/default/files/imagecache/community_logo/adms_logo.png" width="70" height="70" /></a>
            <a href="https://joinup.ec.europa.eu/asset/adms_foss/description" target="_blank"><img alt="Asset Description Metadata Schema for Software (ADMS.SW)" src="http://joinup.ec.europa.eu/sites/default/files/imagecache/community_logo/ADMS_SW_Logo.png" width="70" height="70" /></a>
            <a href="https://joinup.ec.europa.eu/asset/core_business/description" target="_blank"><img alt="Core Business Vocabulary" src="http://joinup.ec.europa.eu/sites/default/files/imagecache/community_logo/core_business_logo.png" width="70" height="70" /></a>
            <a href="https://joinup.ec.europa.eu/asset/core_person/description"><img alt="Core Person Vocabulary" src="http://joinup.ec.europa.eu/sites/default/files/imagecache/community_logo/core_person_logo.png" width="70" height="70" /></a>
            <a href="https://joinup.ec.europa.eu/asset/core_location/description" target="_blank"><img alt="Core Location Vocabulary" src="http://joinup.ec.europa.eu/sites/default/files/imagecache/community_logo/core_location_logo.png" width="70" height="70" /></a>
            <a href="https://joinup.ec.europa.eu/asset/core_public_service/description" target="_blank"><img alt="Core Public Service Vocabulary" src="https://joinup.ec.europa.eu/sites/default/files/imagecache/community_logo/core_public_service_logo.png" width="70" height="70" /></a>
            <a href="http://ec.europa.eu/isa/" target="_blank"><img alt="isa" src="http://joinup.ec.europa.eu/sites/default/files/ckeditor_files/images/isa_logo.png" width="70" height="70" /></a>
          </p>
        </footer>
      </div>
      <xsl:if test="$leaflet">
        <script type="text/javascript" src="/js/map.js"></script>
      </xsl:if>
      <script type="text/javascript"><xsl:text>
        var _gaq = _gaq || [];
        _gaq.push(['_setAccount', '%GOOGLE_ANALYTICS%']);
        _gaq.push(['_trackPageview']);

        (function() {
        var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
        ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
        var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
        })();
      </xsl:text></script>
      </body>
    </html>
  </xsl:template>

  <!-- Standard about page boilerplate -->
  <xsl:template name="about">
    <xsl:param name="leaflet" select="false()" />
    <xsl:call-template name="html">
      <xsl:with-param name="title">
        About: <xsl:value-of select="$subject-label" />
      </xsl:with-param>
      <xsl:with-param name="leaflet" select="$leaflet" />
      <xsl:with-param name="body">
        <xsl:choose>
          <xsl:when test="$subject">
            <xsl:call-template name="content" />
          </xsl:when>
          <xsl:otherwise>
            <h1>About: <xsl:value-of select="$subject-label" /></h1>
            <div class="error">Sorry, we do not know about this resource.</div>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:with-param>
    </xsl:call-template>
  </xsl:template>

  <!-- Add a small RDF description about $subject with links to raw data. -->
  <xsl:template name="rdf-info">
    <dl class="properties">
      <dt>URI</dt>
      <dd><a href="{$subject-uri}"><xsl:value-of select="$subject-uri" /></a></dd>
      <xsl:if test="$subject/rdf:type">
        <dt>Type</dt>
        <dd>
          <xsl:call-template name="rdf-value">
            <xsl:with-param name="element" select="$subject/rdf:type" />
            <xsl:with-param name="strip-uri" select="true()" />
          </xsl:call-template>
        </dd>
      </xsl:if>
      <dt>Raw data</dt>
      <dd>
        <a>
          <xsl:attribute name="href">
            <xsl:call-template name="about-uri">
              <xsl:with-param name="uri" select="$subject-uri" />
            </xsl:call-template>
          </xsl:attribute>
          HTML
        </a>
        <xsl:text> | </xsl:text>
        <a>
          <xsl:attribute name="href">
            <xsl:call-template name="resolve-uri">
              <xsl:with-param name="uri" select="$subject-uri" />
              <xsl:with-param name="format">rdf</xsl:with-param>
            </xsl:call-template>
          </xsl:attribute>
          RDF/XML
        </a>
        <xsl:text> | </xsl:text>
        <a>
          <xsl:attribute name="href">
            <xsl:call-template name="resolve-uri">
              <xsl:with-param name="uri" select="$subject-uri" />
              <xsl:with-param name="format">ttl</xsl:with-param>
            </xsl:call-template>
          </xsl:attribute>
          Turtle
        </a>
      </dd>
    </dl>
  </xsl:template>

  <!-- Add a marker for the specific address to a map. -->
  <xsl:template name="map-address">
    <xsl:param name="address" /><!-- the locn:Address resource -->
    <a>
      <xsl:attribute name="href">
        <xsl:value-of select="$address/@rdf:about" />
      </xsl:attribute>
      <xsl:attribute name="nominatim">
        <xsl:value-of select="$address/locn:thoroughfare" />
        <xsl:text>,</xsl:text>
        <xsl:value-of select="$address/locn:adminUnitL2" />
        <xsl:text> </xsl:text>
        <xsl:choose>
          <xsl:when test="($address/locn:adminUnitL1 = 'ΕΛΛΑΔΑ') and (string-length($address/locn:postCode) = 5)">
            <xsl:value-of select="substring($address/locn:postCode, 1, 3)" />
          </xsl:when>
          <xsl:otherwise>
            <xsl:value-of select="$address/locn:postCode" />
          </xsl:otherwise>
        </xsl:choose>
        <xsl:text>,</xsl:text>
        <xsl:value-of select="$address/locn:adminUnitL1" />
      </xsl:attribute>
      <xsl:value-of select="$address/rdfs:label" />
    </a>
  </xsl:template>

  <!-- Print the URI of the property, with link and label if possible. -->
  <xsl:template name="rdf-property">
    <xsl:param name="element" />
    <xsl:param name="strip-uri" select="true()" />
    <xsl:call-template name="rdf-link">
      <xsl:with-param name="uri" select="concat(namespace-uri($element), local-name($element))" />
      <xsl:with-param name="strip" select="$strip-uri" />
    </xsl:call-template>
  </xsl:template>

  <!-- Print the value of an element, with link and label if possible. -->
  <xsl:template name="rdf-value">
    <xsl:param name="element" />
    <xsl:param name="strip-uri" select="false()" />
    <xsl:variable name="uri" select="string($element/@rdf:about | $element/@rdf:resource)" />
    <xsl:variable name="node-id" select="string($element/@rdf:nodeID)" />
    <xsl:choose>
      <!-- URI -->
      <xsl:when test="$uri">
        <xsl:call-template name="rdf-link">
          <xsl:with-param name="uri" select="$uri" />
          <xsl:with-param name="strip" select="$strip-uri" />
        </xsl:call-template>
      </xsl:when>
      <!-- Blank node -->
      <xsl:when test="$node-id">
        <xsl:text>(</xsl:text>
        <xsl:value-of select="$node-id" />
        <xsl:text>)</xsl:text>
      </xsl:when>
      <!-- Literal -->
      <xsl:otherwise>
        <xsl:value-of select="$element" />
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <!-- Add a HTML link for a resource, with the rdfs:label if it exists. -->
  <xsl:template name="rdf-link">
    <xsl:param name="uri" />
    <xsl:param name="strip" select="true()" /><!-- fallback to strip-uri? -->
    <xsl:variable name="label" select="//rdf:Description[@rdf:about=string($uri)]/rdfs:label" />
    <a>
      <xsl:attribute name="href">
        <xsl:call-template name="resolve-uri">
          <xsl:with-param name="uri" select="$uri" />
        </xsl:call-template>
      </xsl:attribute>
      <xsl:choose>
        <xsl:when test="$label">
          <xsl:value-of select="$label" />
        </xsl:when>
        <xsl:otherwise>
          <xsl:call-template name="to-curie">
            <xsl:with-param name="uri" select="$uri" />
            <xsl:with-param name="strip" select="$strip" />
          </xsl:call-template>
        </xsl:otherwise>
      </xsl:choose>
    </a>
  </xsl:template>

  <!-- Print the CURIE version of a URI using the namespaces defined in an
  external document. -->
  <xsl:template name="to-curie">
    <xsl:param name="uri" />
    <xsl:param name="strip" select="false()" /><!-- fallback to strip-uri? -->
    <xsl:variable name="ns" select="$namespaces//ns:namespace[starts-with(string($uri), string(ns:uri))]" />
    <xsl:choose>
      <xsl:when test="$ns">
        <xsl:value-of select="$ns/ns:prefix" />
        <xsl:text>:</xsl:text>
        <xsl:value-of select="substring(string($uri), string-length($ns/ns:uri) + 1)" />
      </xsl:when>
      <xsl:when test="$strip">
        <xsl:call-template name="strip-uri">
          <xsl:with-param name="uri" select="$uri" />
        </xsl:call-template>
      </xsl:when>
      <xsl:otherwise>
        <xsl:value-of select="string($uri)" />
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <!-- Strip a URI to its last component. E.g., http://example.com/id/test/
  would become test, and http://example.com/def#property would become property.
  -->
  <xsl:template name="strip-uri">
    <xsl:param name="uri" />
    <xsl:choose>
      <xsl:when test="contains(string($uri), '/')">
        <xsl:choose>
          <xsl:when test="substring-after(string($uri), '/') = ''">
            <xsl:value-of select="substring-before(string($uri), '/')" />
          </xsl:when>
          <xsl:otherwise>
            <xsl:call-template name="strip-uri">
              <xsl:with-param name="uri" select="substring-after(string($uri), '/')" />
            </xsl:call-template>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:when>
      <xsl:otherwise>
        <xsl:choose>
          <xsl:when test="contains(string($uri), '#')">
            <xsl:value-of select="substring-after(string($uri), '#')" />
          </xsl:when>
          <xsl:otherwise>
            <xsl:value-of select="string($uri)" />
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <!-- Return a resolvable version of URI, without going through /about if
  possible. -->
  <xsl:template name="resolve-uri">
    <xsl:param name="uri" />
    <xsl:param name="format">html</xsl:param>
    <xsl:choose>
      <xsl:when test="starts-with(string($uri), concat($baseuri, 'id/'))">
        <xsl:choose>
          <xsl:when test="$format = 'html'">
            <xsl:value-of select="string($uri)" />
          </xsl:when>
          <xsl:otherwise>
            <xsl:value-of select="$baseuri" />
            <xsl:text>doc</xsl:text>
            <xsl:value-of select="substring(string($uri), string-length($baseuri)+3)" />
            <xsl:text>.</xsl:text>
            <xsl:value-of select="$format" />
          </xsl:otherwise>
        </xsl:choose>
      </xsl:when>
      <xsl:otherwise>
        <xsl:call-template name="about-uri">
          <xsl:with-param name="uri" select="$uri" />
          <xsl:with-param name="format" select="$format" />
        </xsl:call-template>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <!-- Return URI resolved though the /about service. -->
  <xsl:template name="about-uri">
    <xsl:param name="uri" />
    <xsl:param name="format">html</xsl:param>
    <xsl:text>/about/</xsl:text>
    <xsl:value-of select="$format" />
    <xsl:text>/</xsl:text>
    <xsl:call-template name="urlencode">
      <xsl:with-param name="value" select="string($uri)" />
    </xsl:call-template>
  </xsl:template>

  <!-- URL-encode a value -->
	<xsl:variable name="url-hex" select="'0123456789ABCDEF'"/>
	<xsl:variable name="url-ascii"> !"#$%&amp;'()*+,-./0123456789:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~</xsl:variable>
	<xsl:variable name="url-safe">!'()*-.0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~</xsl:variable>
  <xsl:template name="urlencode">
    <xsl:param name="value" />
    <xsl:if test="$value">
      <xsl:variable name="char" select="substring($value,1,1)" />
      <xsl:choose>
        <xsl:when test="contains($url-safe, $char)">
          <xsl:value-of select="$char" />
        </xsl:when>
        <xsl:when test="contains($url-ascii, $char)">
          <xsl:variable name="codepoint" select="string-length(substring-before($url-ascii,$char)) + 32" />
          <xsl:variable name="hex-digit1" select="substring($url-hex, floor($codepoint div 16) + 1,1)" />
          <xsl:variable name="hex-digit2" select="substring($url-hex, $codepoint mod 16 + 1,1)" />
          <xsl:value-of select="concat('%', $hex-digit1, $hex-digit2)" />
        </xsl:when>
        <xsl:otherwise>
          <xsl:value-of select="$char" />
        </xsl:otherwise>
      </xsl:choose>
      <xsl:call-template name="urlencode">
        <xsl:with-param name="value" select="substring($value, 2)" />
      </xsl:call-template>
    </xsl:if>
  </xsl:template>

</xsl:stylesheet>
<!-- vim:set ts=2 sw=2 et: -->
