<?vsp
-- /doc and /about handler script
--
-- Copyright 2014 European Union
-- Author: Vianney le ClÃ©ment de Saint-Marcq (PwC EU Services)
--
-- Licensed under the EUPL, Version 1.1 or - as soon they
-- will be approved by the European Commission - subsequent
-- versions of the EUPL (the "Licence");
-- You may not use this work except in compliance with the
-- Licence.
-- You may obtain a copy of the Licence at:
-- http://ec.europa.eu/idabc/eupl
--
-- Unless required by applicable law or agreed to in
-- writing, software distributed under the Licence is
-- distributed on an "AS IS" basis,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
-- express or implied.
-- See the Licence for the specific language governing
-- permissions and limitations under the Licence.

-- Read HTTP parameters
declare _type, _id, _uri, _format, uri varchar;
_type := get_keyword('type', params, '');
_id := get_keyword('id', params, '');
_uri := get_keyword('uri', params, '');
_format := get_keyword('format', params, '');

-- Fallbacks
if(_uri = '') {
  if(_id = '') {
    _uri := sprintf('%BASEURI%id/%U', _type);
  } else {
    _uri := sprintf('%BASEURI%id/%U/%U', _type, _id);
  }
}

if(_format = '') {
  declare accept varchar;
  accept := http_request_header(lines, 'Accept');
  if(regexp_like(accept, 'application/rdf.xml')) {
    _format := 'rdf';
  } else if(regexp_like(accept, 'text/rdf.n3|text/rdf.turtle|text/turtle')) {
    _format := 'ttl';
  } else {
    _format := 'html';
  }
} else if(_format <> 'html' and _format <> 'rdf' and _format <> 'ttl') {
  _format := 'html';
}

-- Default query and stylesheet
declare query, stylesheet varchar;
query := 'CONSTRUCT {
  <URI> ?p ?o .
  ?s ?p <URI> .
  ?s rdfs:label ?slabel .
  ?p rdfs:label ?plabel .
  ?o rdfs:label ?olabel .
} WHERE {
  {
    <URI> ?p ?o
    OPTIONAL { { SELECT ?p SAMPLE(?label) AS ?plabel
                 WHERE { ?p rdfs:label ?label } GROUP BY ?p } }
    OPTIONAL { { SELECT ?o SAMPLE(?label) AS ?olabel
                 WHERE { ?o rdfs:label ?label } GROUP BY ?o } }
  } UNION {
    ?s ?p <URI>
    OPTIONAL { { SELECT ?p SAMPLE(?label) AS ?iplabel
                 WHERE { ?p rdfs:label ?label } GROUP BY ?p } }
    OPTIONAL { { SELECT ?s SAMPLE(?label) AS ?slabel
                 WHERE { ?s rdfs:label ?label } GROUP BY ?s } }
  }
}';
stylesheet := 'about.xsl';

-- Specialized queries and/or stylesheets
if(_type = 'address' and _id <> '') {
  stylesheet := 'address.xsl';
} else if(_type = 'organization' and _id <> '') {
  query := 'CONSTRUCT {
    <URI> a org:Organization ;
      rdfs:label ?label ;
      org:identifier ?identifier ;
      rov:orgType ?type ;
      org:classification ?category ;
      org:subOrganizationOf ?parent ;
      locn:address ?address ;
      foaf:phone ?phone .
    ?type rdfs:label ?typelabel .
    ?category rdfs:label ?categorylabel .
    ?parent rdfs:label ?parentlabel .
    ?child org:subOrganizationOf <URI> ;
      rdfs:label ?childlabel .
    ?address a locn:Address ;
      rdfs:label ?addrlabel ;
      locn:thoroughfare ?street ;
      locn:locatorDesignator ?number ;
      locn:postCode ?postcode ;
      locn:adminUnitL2 ?municipality ;
      locn:adminUnitL1 ?country .
  } WHERE {
    {
      <URI> a org:Organization ;
        rdfs:label ?label .
      OPTIONAL { <URL> org:identifier ?identifier . }
      OPTIONAL { <URI> rov:orgType ?type .
                 ?type rdfs:label ?typelabel . }
      OPTIONAL { <URI> org:classification ?category .
                 ?category rdfs:label ?categorylabel . }
      OPTIONAL { <URI> org:subOrganizationOf ?parent .
                 ?parent rdfs:label ?parentlabel . }
    } UNION {
      { SELECT * WHERE {
          ?child org:subOrganizationOf <URI> ;
            rdfs:label ?childlabel .
        } }
    } UNION {
      { SELECT * WHERE {
          <URI> locn:address ?address .
          ?address a locn:Address ;
            rdfs:label ?addrlabel .
          OPTIONAL { ?address locn:thoroughfare ?street }
          OPTIONAL { ?address locn:locatorDesignator ?number }
          OPTIONAL { ?address locn:postCode ?postcode }
          OPTIONAL { ?address locn:adminUnitL2 ?municipality }
          OPTIONAL { ?address locn:adminUnitL1 ?country }
        } }
    } UNION {
      { SELECT * WHERE {
          <URI> foaf:phone ?phone .
        } }
    }
  }';
  stylesheet := 'organization.xsl';
}

query := replace(query, '<URI>', sprintf('<%s>', _uri));
stylesheet := sprintf('%ROOTURI%xslt/%s', stylesheet);

-- Execute the query
declare rset, triples, ses any;
rset := DB.DBA.SPARQL_EVAL_TO_ARRAY(query, null, 0);
triples := dict_list_keys (rset[0][0], 1);
ses := string_output();
if(_format = 'ttl') {
  DB.DBA.RDF_TRIPLES_TO_TTL(triples, ses);
} else {
  DB.DBA.RDF_TRIPLES_TO_RDF_XML_TEXT(triples, 1, ses);
}
if(_format = 'rdf') {
  http_header('Content-type: application/rdf+xml; charset=UTF-8\r\n');
} else if(_format = 'ttl') {
  http_header('Content-type: text/turtle; charset=UTF-8\r\n');
}
http(string_output_string(ses));
if(_format = 'html') {
  http_xslt(stylesheet, vector('subject-uri', _uri));
}
?>
